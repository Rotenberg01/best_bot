# –°—Ç–≤–æ—Ä—é –æ—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª bot.js –∑ –ø–æ–≤–Ω–∏–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º

bot_js_content = '''
const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const bodyParser = require('body-parser');
const cors = require('cors');
const cron = require('node-cron');
const moment = require('moment');
const axios = require('axios');
require('dotenv').config();

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
const BOT_TOKEN = process.env.BOT_TOKEN || '8464053440:AAGsYPF-TyVENUHBloOfVuHvq2ehuSpn-VY';
const PORT = process.env.PORT || 3000;
const ADMIN_PORT = process.env.ADMIN_PORT || 3001;

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, {polling: true});

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
const db = new sqlite3.Database('./database/cosmetology.db');

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
const CITIES = ['–û–Ω–ª–∞–π–Ω', '–î–Ω—ñ–ø—Ä–æ', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è'];
const PROCEDURES = [
    {name: '–ß–∏—â–µ–Ω–Ω—è –æ–±–ª–∏—á—á—è', price: 800, cities: ['–î–Ω—ñ–ø—Ä–æ', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è']},
    {name: '–ú–µ–∑–æ—Ç–µ—Ä–∞–ø—ñ—è', price: 1200, cities: ['–î–Ω—ñ–ø—Ä–æ', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è']},
    {name: '–ë—ñ–æ—Ä–µ–≤—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è', price: 1500, cities: ['–î–Ω—ñ–ø—Ä–æ', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è']},
    {name: '–ü—ñ–ª—ñ–Ω–≥ —Ö—ñ–º—ñ—á–Ω–∏–π', price: 900, cities: ['–î–Ω—ñ–ø—Ä–æ', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è']},
    {name: '–ö–æ–Ω—Ç—É—Ä–Ω–∞ –ø–ª–∞—Å—Ç–∏–∫–∞', price: 2000, cities: ['–î–Ω—ñ–ø—Ä–æ', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è']},
    {name: '–ë–æ—Ç—É–ª—ñ–Ω–æ—Ç–µ—Ä–∞–ø—ñ—è', price: 1800, cities: ['–î–Ω—ñ–ø—Ä–æ', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è']},
    {name: 'RF-–ª—ñ—Ñ—Ç–∏–Ω–≥', price: 1000, cities: ['–î–Ω—ñ–ø—Ä–æ', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è']},
    {name: '–§–æ—Ç–æ–æ–º–æ–ª–æ–¥–∂–µ–Ω–Ω—è', price: 1100, cities: ['–î–Ω—ñ–ø—Ä–æ', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è']},
    {name: '–ú–∞—Å–∞–∂ –æ–±–ª–∏—á—á—è', price: 600, cities: ['–î–Ω—ñ–ø—Ä–æ', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è']},
    {name: '–ö–∞—Ä–±–æ–∫—Å–∏—Ç–µ—Ä–∞–ø—ñ—è', price: 1300, cities: ['–î–Ω—ñ–ø—Ä–æ', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è']},
    {name: 'SMAS-–ª—ñ—Ñ—Ç–∏–Ω–≥', price: 2500, cities: ['–î–Ω—ñ–ø—Ä–æ', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è']},
    {name: '–ü–ª–∞–∑–º–æ—Ç–µ—Ä–∞–ø—ñ—è', price: 1400, cities: ['–î–Ω—ñ–ø—Ä–æ', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è']},
    {name: '–ú—ñ–∫—Ä–æ–Ω—ñ–¥–ª—ñ–Ω–≥', price: 1100, cities: ['–î–Ω—ñ–ø—Ä–æ', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è']},
    {name: '–õ—ñ–ø–æ–ª—ñ—Ç–∏–∫–∏', price: 1600, cities: ['–î–Ω—ñ–ø—Ä–æ', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è']},
    {name: '–ù–∏—Ç—å–æ–≤–∏–π –ª—ñ—Ñ—Ç–∏–Ω–≥', price: 3000, cities: ['–î–Ω—ñ–ø—Ä–æ', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è']},
    {name: '–õ–∞–∑–µ—Ä–Ω–∞ —à–ª—ñ—Ñ–æ–≤–∫–∞', price: 2200, cities: ['–î–Ω—ñ–ø—Ä–æ', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è']},
    {name: '–ö—Ä—ñ–æ–ª—ñ–ø–æ–ª—ñ–∑', price: 1800, cities: ['–î–Ω—ñ–ø—Ä–æ', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è']},
    {name: '–£–ª—å—Ç—Ä–∞–∑–≤—É–∫–æ–≤–∞ —á–∏—Å—Ç–∫–∞', price: 700, cities: ['–î–Ω—ñ–ø—Ä–æ', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è']},
    {name: '–í–∞–∫—É—É–º–Ω–∞ —á–∏—Å—Ç–∫–∞', price: 650, cities: ['–î–Ω—ñ–ø—Ä–æ', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è']},
    {name: '–ê–ª—å–≥—ñ–Ω–∞—Ç–Ω—ñ –º–∞—Å–∫–∏', price: 400, cities: ['–î–Ω—ñ–ø—Ä–æ', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è']}
];

const CONSULTATION_PRICE = 500;
const SUBSCRIPTION_PRICE = 300;
const PRIVATE_CHANNEL = 'https://t.me/+EYuNQljQHaNjYmI6';
const PUBLIC_CHANNEL = 'https://t.me/dr_tykhonska';

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î
function initDatabase() {
    const queries = [
        `CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id INTEGER UNIQUE NOT NULL,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            active INTEGER DEFAULT 1
        )`,
        `CREATE TABLE IF NOT EXISTS appointments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            type TEXT NOT NULL,
            city TEXT NOT NULL,
            date TEXT NOT NULL,
            time TEXT NOT NULL,
            procedure_name TEXT,
            price INTEGER,
            payment_method TEXT,
            payment_status TEXT DEFAULT 'pending',
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )`,
        `CREATE TABLE IF NOT EXISTS subscriptions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            start_date DATE NOT NULL,
            end_date DATE NOT NULL,
            active INTEGER DEFAULT 1,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )`,
        `CREATE TABLE IF NOT EXISTS working_schedule (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT NOT NULL,
            city TEXT NOT NULL,
            time TEXT NOT NULL,
            available INTEGER DEFAULT 1
        )`,
        `CREATE TABLE IF NOT EXISTS admin_messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            message TEXT NOT NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            sent_to_users INTEGER DEFAULT 0
        )`
    ];
    
    queries.forEach(query => {
        db.run(query, (err) => {
            if (err) console.error('Database error:', err);
        });
    });
    
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞');
}

// –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
function addUser(telegramId, username, firstName, lastName) {
    return new Promise((resolve, reject) => {
        const query = `INSERT OR IGNORE INTO users (telegram_id, username, first_name, last_name) 
                      VALUES (?, ?, ?, ?)`;
        db.run(query, [telegramId, username, firstName, lastName], function(err) {
            if (err) reject(err);
            else resolve(this.lastID);
        });
    });
}

function getUserById(telegramId) {
    return new Promise((resolve, reject) => {
        const query = `SELECT * FROM users WHERE telegram_id = ?`;
        db.get(query, [telegramId], (err, row) => {
            if (err) reject(err);
            else resolve(row);
        });
    });
}

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä
function generateMainMenu() {
    return {
        reply_markup: {
            inline_keyboard: [
                [{text: '‚ÑπÔ∏è –í—Å—Ç—É–ø–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', callback_data: 'intro_info'}],
                [{text: 'üìÖ –ó–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é', callback_data: 'consultation_booking'}],
                [{text: 'üíÜ‚Äç‚ôÄÔ∏è –ó–∞–ø–∏—Å –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏', callback_data: 'procedure_booking'}],
                [{text: 'üíé –ü—ñ–¥–ø–∏—Å–∫–∞ Beauty Insider', callback_data: 'subscription'}],
                [{text: 'üë• –°–ø—ñ–ª—å–Ω–æ—Ç–∞ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥—ñ—ó', callback_data: 'community'}],
                [{text: 'üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏', callback_data: 'contacts'}],
                [{text: 'üìç –ù–∞—à—ñ –ª–æ–∫–∞—Ü—ñ—ó', callback_data: 'locations'}]
            ]
        }
    };
}

function generateCityKeyboard(cities) {
    const keyboard = cities.map(city => [{text: city, callback_data: `city_${city}`}]);
    keyboard.push([{text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main'}]);
    return {reply_markup: {inline_keyboard: keyboard}};
}

function generateCalendar(year, month) {
    const startDate = new Date(year, month, 1);
    const endDate = new Date(year, month + 1, 0);
    const keyboard = [];
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑ –º—ñ—Å—è—Ü–µ–º —Ç–∞ —Ä–æ–∫–æ–º
    const monthNames = [
        '–°—ñ—á–µ–Ω—å', '–õ—é—Ç–∏–π', '–ë–µ—Ä–µ–∑–µ–Ω—å', '–ö–≤—ñ—Ç–µ–Ω—å', '–¢—Ä–∞–≤–µ–Ω—å', '–ß–µ—Ä–≤–µ–Ω—å',
        '–õ–∏–ø–µ–Ω—å', '–°–µ—Ä–ø–µ–Ω—å', '–í–µ—Ä–µ—Å–µ–Ω—å', '–ñ–æ–≤—Ç–µ–Ω—å', '–õ–∏—Å—Ç–æ–ø–∞–¥', '–ì—Ä—É–¥–µ–Ω—å'
    ];
    
    keyboard.push([{text: `${monthNames[month]} ${year}`, callback_data: 'ignore'}]);
    
    // –î–Ω—ñ —Ç–∏–∂–Ω—è
    keyboard.push([
        {text: '–ü–Ω', callback_data: 'ignore'},
        {text: '–í—Ç', callback_data: 'ignore'},
        {text: '–°—Ä', callback_data: 'ignore'},
        {text: '–ß—Ç', callback_data: 'ignore'},
        {text: '–ü—Ç', callback_data: 'ignore'},
        {text: '–°–±', callback_data: 'ignore'},
        {text: '–ù–¥', callback_data: 'ignore'}
    ]);
    
    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–Ω—ñ–≤
    let week = [];
    const firstDay = startDate.getDay();
    const adjustedFirstDay = firstDay === 0 ? 6 : firstDay - 1;
    
    // –ü—É—Å—Ç—ñ –¥–Ω—ñ –≤ –ø–µ—Ä—à–æ–º—É —Ç–∏–∂–Ω—ñ
    for (let i = 0; i < adjustedFirstDay; i++) {
        week.push({text: ' ', callback_data: 'ignore'});
    }
    
    // –î–Ω—ñ –º—ñ—Å—è—Ü—è
    for (let day = 1; day <= endDate.getDate(); day++) {
        const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
        week.push({text: String(day), callback_data: `date_${dateStr}`});
        
        if (week.length === 7) {
            keyboard.push([...week]);
            week = [];
        }
    }
    
    // –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è
    while (week.length < 7) {
        week.push({text: ' ', callback_data: 'ignore'});
    }
    if (week.some(btn => btn.text !== ' ')) {
        keyboard.push(week);
    }
    
    // –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –º—ñ–∂ –º—ñ—Å—è—Ü—è–º–∏
    const prevMonth = month === 0 ? {month: 11, year: year - 1} : {month: month - 1, year};
    const nextMonth = month === 11 ? {month: 0, year: year + 1} : {month: month + 1, year};
    
    keyboard.push([
        {text: '‚¨ÖÔ∏è', callback_data: `calendar_${prevMonth.year}_${prevMonth.month}`},
        {text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_city'},
        {text: '‚û°Ô∏è', callback_data: `calendar_${nextMonth.year}_${nextMonth.month}`}
    ]);
    
    return {reply_markup: {inline_keyboard: keyboard}};
}

function generateTimeSlots(date, city) {
    const times = [];
    for (let hour = 8; hour < 20; hour++) {
        times.push(`${String(hour).padStart(2, '0')}:00`);
        times.push(`${String(hour).padStart(2, '0')}:30`);
    }
    
    const keyboard = [];
    let row = [];
    
    times.forEach((time, index) => {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —á–∞—Å—É (—Ç—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±—Ä–æ–Ω—é–≤–∞–Ω—å)
        const isAvailable = Math.random() > 0.3; // –Ü–º—ñ—Ç–∞—Ü—ñ—è –∑–∞–π–Ω—è—Ç–∏—Ö —Å–ª–æ—Ç—ñ–≤
        const text = isAvailable ? time : `‚ùå ${time}`;
        const callbackData = isAvailable ? `time_${time}` : 'ignore';
        
        row.push({text, callback_data: callbackData});
        
        if (row.length === 3) {
            keyboard.push([...row]);
            row = [];
        }
    });
    
    if (row.length > 0) {
        keyboard.push(row);
    }
    
    keyboard.push([{text: 'üîô –ù–∞–∑–∞–¥ –¥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è', callback_data: 'back_to_calendar'}]);
    
    return {reply_markup: {inline_keyboard: keyboard}};
}

// –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.onText(/\\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const user = msg.from;
    
    try {
        await addUser(user.id, user.username, user.first_name, user.last_name);
        
        const welcomeMessage = `
üå∏ –í—ñ—Ç–∞—é —É –º–æ—î–º—É –±–æ—Ç—ñ!

–Ø - –¥–æ–∫—Ç–æ—Ä –¢–∏—Ö–æ–Ω—Å—å–∫–∞, –≤–∞—à –æ—Å–æ–±–∏—Å—Ç–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∑ –ø–∏—Ç–∞–Ω—å –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥—ñ—ó.

‚ú® –©–æ —è –º–æ–∂—É –¥–ª—è –≤–∞—Å –∑—Ä–æ–±–∏—Ç–∏:
‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –∞–±–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—É
‚Ä¢ –ü—ñ–¥–ø–∏—Å–∞—Ç–∏ –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–∞–Ω–∞–ª Beauty Insider
‚Ä¢ –ù–∞–¥–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Å–ª—É–≥–∏
‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞—à—ñ –ª–æ–∫–∞—Ü—ñ—ó

–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ üëá
        `;
        
        const photoPath = './assets/doctor-photo.jpg'; // –§–æ—Ç–æ –¥–æ–∫—Ç–æ—Ä–∞
        
        try {
            await bot.sendPhoto(chatId, photoPath, {
                caption: welcomeMessage,
                ...generateMainMenu()
            });
        } catch {
            await bot.sendMessage(chatId, welcomeMessage, generateMainMenu());
        }
        
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ /start:', error);
        await bot.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
});

// –û–±—Ä–æ–±–Ω–∏–∫ callback –∑–∞–ø–∏—Ç—ñ–≤
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;
    const messageId = query.message.message_id;
    
    try {
        await bot.answerCallbackQuery(query.id);
        
        if (data === 'intro_info') {
            const infoMessage = `
üë©‚Äç‚öïÔ∏è **–ü—Ä–æ –¥–æ–∫—Ç–æ—Ä–∞ –¢–∏—Ö–æ–Ω—Å—å–∫—É**

üéì **–û—Å–≤—ñ—Ç–∞ —Ç–∞ –¥–æ—Å–≤—ñ–¥:**
‚Ä¢ –í–∏—â–∞ –º–µ–¥–∏—á–Ω–∞ –æ—Å–≤—ñ—Ç–∞
‚Ä¢ –°–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è: –¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥—ñ—è —Ç–∞ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥—ñ—è
‚Ä¢ –ü–æ–Ω–∞–¥ 5 —Ä–æ–∫—ñ–≤ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ–≥–æ –¥–æ—Å–≤—ñ–¥—É
‚Ä¢ –ü–æ—Å—Ç—ñ–π–Ω–µ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó

üíé **–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è:**
‚Ä¢ –Ü–Ω'—î–∫—Ü—ñ–π–Ω–∞ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥—ñ—è
‚Ä¢ –ê–ø–∞—Ä–∞—Ç–Ω–∞ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥—ñ—è  
‚Ä¢ –ï—Å—Ç–µ—Ç–∏—á–Ω–∞ –¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥—ñ—è
‚Ä¢ –ê–Ω—Ç–∏–≤—ñ–∫–æ–≤—ñ –ø—Ä–æ–≥—Ä–∞–º–∏

üèÜ **–ù–∞—à—ñ –ø–µ—Ä–µ–≤–∞–≥–∏:**
‚Ä¢ –Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –¥–æ –∫–æ–∂–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å—É—á–∞—Å–Ω–æ–≥–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è
‚Ä¢ –°–µ—Ä—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω—ñ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∏ –≤—ñ–¥ –ø—Ä–æ–≤—ñ–¥–Ω–∏—Ö –±—Ä–µ–Ω–¥—ñ–≤
‚Ä¢ –ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –∫–ª—ñ–Ω—ñ–∫–∏

üì± **–°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –Ω–æ–≤–∏–Ω–∞–º–∏:**
Instagram: @dr.tykhonskaa
Telegram: @tykhonskaa
TikTok: @dr.tykhonska
            `;
            
            const backKeyboard = {
                reply_markup: {
                    inline_keyboard: [[{text: 'üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é', callback_data: 'back_to_main'}]]
                }
            };
            
            await bot.editMessageText(infoMessage, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                ...backKeyboard
            });
            
        } else if (data === 'consultation_booking') {
            const consultationMessage = `
üìÖ **–ó–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é**

üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: ${CONSULTATION_PRICE} –≥—Ä–Ω

üîπ **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è** - –ø–µ—Ä—à–∞ –∑—É—Å—Ç—Ä—ñ—á (60 —Ö–≤)
üîπ **–ü–æ–≤—Ç–æ—Ä–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è** - –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∏–π –æ–≥–ª—è–¥ (30 —Ö–≤)

–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó:
            `;
            
            const consultationKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{text: 'üîπ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è', callback_data: 'cons_type_consultation'}],
                        [{text: 'üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è', callback_data: 'cons_type_repeat'}],
                        [{text: 'üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é', callback_data: 'back_to_main'}]
                    ]
                }
            };
            
            await bot.editMessageText(consultationMessage, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                ...consultationKeyboard
            });
            
        } else if (data.startsWith('cons_type_')) {
            const consultationType = data.replace('cons_type_', '');
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –≤ –ø–∞–º'—è—Ç—ñ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ - –≤ –ë–î)
            
            const cityMessage = `
üèôÔ∏è **–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó:**

üñ•Ô∏è **–û–Ω–ª–∞–π–Ω** - –≤—ñ–¥–µ–æ–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è (—Ç—ñ–ª—å–∫–∏ –æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ—é)
üè¢ **–î–Ω—ñ–ø—Ä–æ** - –∫–ª—ñ–Ω—ñ–∫–∞ –Ω–∞ –ü—Ä–æ—Å–ø–µ–∫—Ç—ñ –û–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ü–æ–ª—è 22
üè¢ **–ó–∞–ø–æ—Ä—ñ–∂–∂—è** - –∫–ª—ñ–Ω—ñ–∫–∞ –Ω–∞ –ü–µ—Ä—à—ñ–π –ª–∏–≤–∞—Ä–Ω—ñ–π 27–∞
            `;
            
            await bot.editMessageText(cityMessage, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                ...generateCityKeyboard(CITIES)
            });
            
        } else if (data.startsWith('city_')) {
            const city = data.replace('city_', '');
            const now = new Date();
            
            const calendarMessage = `
üìÖ **–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó**

üèôÔ∏è –ú—ñ—Å—Ç–æ: ${city}
üìã –¢–∏–ø: –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è
üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: ${CONSULTATION_PRICE} –≥—Ä–Ω

–û–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω—É –¥–ª—è –≤–∞—Å –¥–∞—Ç—É:
            `;
            
            await bot.editMessageText(calendarMessage, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                ...generateCalendar(now.getFullYear(), now.getMonth())
            });
            
        } else if (data.startsWith('date_')) {
            const date = data.replace('date_', '');
            const city = '–î–Ω—ñ–ø—Ä–æ'; // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
            
            const timeMessage = `
‚è∞ **–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó**

üìÖ –î–∞—Ç–∞: ${date}
üèôÔ∏è –ú—ñ—Å—Ç–æ: ${city}
üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: ${CONSULTATION_PRICE} –≥—Ä–Ω

–î–æ—Å—Ç—É–ø–Ω–∏–π —á–∞—Å (‚ùå - –∑–∞–π–Ω—è—Ç–æ):
            `;
            
            await bot.editMessageText(timeMessage, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                ...generateTimeSlots(date, city)
            });
            
        } else if (data.startsWith('time_')) {
            const time = data.replace('time_', '');
            const paymentMessage = `
üí≥ **–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏**

üìÖ –î–∞—Ç–∞: 2024-01-15 (–ø—Ä–∏–∫–ª–∞–¥)
‚è∞ –ß–∞—Å: ${time}
üèôÔ∏è –ú—ñ—Å—Ç–æ: –î–Ω—ñ–ø—Ä–æ
üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: ${CONSULTATION_PRICE} –≥—Ä–Ω

–Ø–∫ –±–∞–∂–∞—î—Ç–µ —Å–ø–ª–∞—Ç–∏—Ç–∏?
            `;
            
            const paymentKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ –∫–∞—Ä—Ç–æ—é (Portmone)', callback_data: 'payment_card'}],
                        [{text: 'üíµ –ì–æ—Ç—ñ–≤–∫–æ—é –ø—Ä–∏ –ø—Ä–∏–π–æ–º—ñ', callback_data: 'payment_cash'}],
                        [{text: 'üîô –ù–∞–∑–∞–¥ –¥–æ —á–∞—Å—É', callback_data: 'back_to_time'}]
                    ]
                }
            };
            
            await bot.editMessageText(paymentMessage, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                ...paymentKeyboard
            });
            
        } else if (data === 'payment_card') {
            const paymentUrl = `https://www.portmone.com.ua/gateway/?payee_id=YOUR_PAYEE_ID&shop_order_number=${Date.now()}&bill_amount=${CONSULTATION_PRICE}&description=Consultation&success_url=https://dr-tykhonska.com.ua/success&failure_url=https://dr-tykhonska.com.ua/failure`;
            
            const paymentMessage = `
‚úÖ **–í–∞—à –∑–∞–ø–∏—Å –º–∞–π–∂–µ –≥–æ—Ç–æ–≤–∏–π!**

–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –¥–ª—è –æ–ø–ª–∞—Ç–∏.

–ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –æ–ø–ª–∞—Ç–∏ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–µ—Ç–∞–ª—ñ.

üí° **–í–∞–∂–ª–∏–≤–æ:** –∑–±–µ—Ä–µ–≥–∏—Ç–µ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è - –≤ –Ω—å–æ–º—É –±—É–¥—É—Ç—å –≤—Å—ñ –¥–µ—Ç–∞–ª—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Å—É.
            `;
            
            const paymentKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{text: 'üí≥ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏', url: paymentUrl}],
                        [{text: 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data: 'back_to_main'}]
                    ]
                }
            };
            
            await bot.editMessageText(paymentMessage, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                ...paymentKeyboard
            });
            
        } else if (data === 'payment_cash') {
            const confirmationMessage = `
‚úÖ **–ó–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!**

üìã **–î–µ—Ç–∞–ª—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Å—É:**
üë§ –ü–∞—Ü—ñ—î–Ω—Ç: ${query.from.first_name}
üìÖ –î–∞—Ç–∞: 15 —Å—ñ—á–Ω—è 2024 (–ø—Ä–∏–∫–ª–∞–¥)
‚è∞ –ß–∞—Å: 14:00
üèôÔ∏è –ú—ñ—Å—Ç–æ: –î–Ω—ñ–ø—Ä–æ
üìç –ê–¥—Ä–µ—Å–∞: –ü—Ä–æ—Å–ø–µ–∫—Ç –û–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ü–æ–ª—è 22
üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: ${CONSULTATION_PRICE} –≥—Ä–Ω (–≥–æ—Ç—ñ–≤–∫–æ—é)

üìû **–ö–æ–Ω—Ç–∞–∫—Ç–∏ –¥–ª—è –∑–≤'—è–∑–∫—É:**
Telegram: @tykhonskaa
–¢–µ–ª–µ—Ñ–æ–Ω: +380-XX-XXX-XX-XX

üí° **–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:** –ø—Ä–∏–π–¥—ñ—Ç—å –∑–∞ 10 —Ö–≤–∏–ª–∏–Ω –¥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ–≥–æ —á–∞—Å—É.

–ó–∞ –¥–æ–±—É –¥–æ –ø—Ä–∏–π–æ–º—É –º–∏ –Ω–∞–¥—ñ—à–ª–µ–º–æ –≤–∞–º –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.
            `;
            
            const doneKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{text: 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data: 'back_to_main'}]
                    ]
                }
            };
            
            await bot.editMessageText(confirmationMessage, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                ...doneKeyboard
            });
            
            // –¢—É—Ç –¥–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å –≤ –ë–î
            
        } else if (data === 'contacts') {
            const contactsMessage = `
üìû **–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è**

üë©‚Äç‚öïÔ∏è **–î–æ–∫—Ç–æ—Ä –¢–∏—Ö–æ–Ω—Å—å–∫–∞**

üì± **Telegram:** @tykhonskaa
üì∏ **Instagram:** dr.tykhonskaa  
üì∫ **TikTok:** @dr.tykhonska
üì¢ **–ö–∞–Ω–∞–ª:** https://t.me/dr_tykhonska

üìû **–¢–µ–ª–µ—Ñ–æ–Ω:**
+380-XX-XXX-XX-XX

üìß **Email:**
dr.tykhonska@gmail.com

üïí **–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏:**
–ü–Ω-–ü—Ç: 8:00 - 20:00
–°–±: 9:00 - 18:00
–ù–¥: –≤–∏—Ö—ñ–¥–Ω–∏–π
            `;
            
            const contactsKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{text: 'üì± –ù–∞–ø–∏—Å–∞—Ç–∏ –≤ Telegram', url: 'https://t.me/tykhonskaa'}],
                        [{text: 'üì∏ –ü–µ—Ä–µ–π—Ç–∏ –≤ Instagram', url: 'https://instagram.com/dr.tykhonskaa'}],
                        [{text: 'üì¢ –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', url: 'https://t.me/dr_tykhonska'}],
                        [{text: 'üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é', callback_data: 'back_to_main'}]
                    ]
                }
            };
            
            await bot.editMessageText(contactsMessage, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                ...contactsKeyboard
            });
            
        } else if (data === 'locations') {
            const locationsMessage = `
üìç **–ù–∞—à—ñ –ª–æ–∫–∞—Ü—ñ—ó**

üè¢ **–î–Ω—ñ–ø—Ä–æ**
üìç –ü—Ä–æ—Å–ø–µ–∫—Ç –û–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ü–æ–ª—è 22
üöá –ú–µ—Ç—Ä–æ: –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ (5 —Ö–≤ –ø—ñ—à–∫–∏)
üÖøÔ∏è –ü–∞—Ä–∫—É–≤–∞–Ω–Ω—è: —î

üè¢ **–ó–∞–ø–æ—Ä—ñ–∂–∂—è** 
üìç –ü–µ—Ä—à–∞ –ª–∏–≤–∞—Ä–Ω–∞ 27–∞
üöå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: –∑—É–ø–∏–Ω–∫–∞ "–¶–µ–Ω—Ç—Ä" 
üÖøÔ∏è –ü–∞—Ä–∫—É–≤–∞–Ω–Ω—è: —î

üí° **–Ø–∫ –∑–Ω–∞–π—Ç–∏:**
–í—Å—ñ –Ω–∞—à—ñ –∫–ª—ñ–Ω—ñ–∫–∏ —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω—ñ –≤ —Ü–µ–Ω—Ç—Ä—ñ –º—ñ—Å—Ç–∞ –∑ –∑—Ä—É—á–Ω–∏–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∏–º —Å–ø–æ–ª—É—á–µ–Ω–Ω—è–º.
            `;
            
            const locationsKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{text: 'üó∫Ô∏è –î–Ω—ñ–ø—Ä–æ –Ω–∞ –∫–∞—Ä—Ç—ñ', url: 'https://maps.app.goo.gl/vauDWtxgUE4J4b8M6?g_st=ic'}],
                        [{text: 'üó∫Ô∏è –ó–∞–ø–æ—Ä—ñ–∂–∂—è –Ω–∞ –∫–∞—Ä—Ç—ñ', url: 'https://maps.app.goo.gl/nyoi4rQC54FQCP7F9?g_st=ic'}],
                        [{text: 'üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é', callback_data: 'back_to_main'}]
                    ]
                }
            };
            
            await bot.editMessageText(locationsMessage, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                ...locationsKeyboard
            });
            
        } else if (data === 'subscription') {
            const subscriptionMessage = `
üíé **–ü—ñ–¥–ø–∏—Å–∫–∞ Beauty Insider**

üî• **–©–æ –≤–∞—Å —á–µ–∫–∞—î:**
‚Ä¢ –ï–∫—Å–∫–ª—é–∑–∏–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ –∫—Ä–∞—Å–∏ —Ç–∞ –∑–¥–æ—Ä–æ–≤'—è
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –≤—ñ–¥ –¥–æ–∫—Ç–æ—Ä–∞  
‚Ä¢ –†–æ–∑–±–æ—Ä–∏ —Ä–µ–∞–ª—å–Ω–∏—Ö –∫–µ–π—Å—ñ–≤
‚Ä¢ –ó–Ω–∏–∂–∫–∏ –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ –¥–æ 15%
‚Ä¢ –ü–µ—Ä—à–∏–º–∏ –¥—ñ–∑–Ω–∞–≤–∞–π—Ç–µ—Å—è –ø—Ä–æ –Ω–æ–≤–∏–Ω–∫–∏

üí∞ **–í–∞—Ä—Ç—ñ—Å—Ç—å:** ${SUBSCRIPTION_PRICE} –≥—Ä–Ω/–º—ñ—Å—è—Ü—å
‚è∞ **–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:** 30 –¥–Ω—ñ–≤

üì± –ó–∞ 3 –¥–Ω—ñ –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è.
            `;
            
            const subscriptionKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{text: 'üí≥ –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è (300 –≥—Ä–Ω)', callback_data: 'subscribe_pay'}],
                        [{text: 'üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é', callback_data: 'back_to_main'}]
                    ]
                }
            };
            
            await bot.editMessageText(subscriptionMessage, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                ...subscriptionKeyboard
            });
            
        } else if (data === 'subscribe_pay') {
            const paymentUrl = `https://www.portmone.com.ua/gateway/?payee_id=YOUR_PAYEE_ID&shop_order_number=SUB${Date.now()}&bill_amount=${SUBSCRIPTION_PRICE}&description=Beauty%20Insider%20Subscription&success_url=https://dr-tykhonska.com.ua/sub-success&failure_url=https://dr-tykhonska.com.ua/sub-failure`;
            
            const payMessage = `
üí≥ **–û–ø–ª–∞—Ç–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ Beauty Insider**

üí∞ –°—É–º–∞: ${SUBSCRIPTION_PRICE} –≥—Ä–Ω
‚è∞ –¢–µ—Ä–º—ñ–Ω: 30 –¥–Ω—ñ–≤

–ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –æ–ø–ª–∞—Ç–∏ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ:
‚úÖ –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–∞–Ω–∞–ª
‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏
‚úÖ –î–æ—Å—Ç—É–ø –¥–æ –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
            `;
            
            const payKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{text: 'üí≥ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏', url: paymentUrl}],
                        [{text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'subscription'}]
                    ]
                }
            };
            
            await bot.editMessageText(payMessage, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                ...payKeyboard
            });
            
        } else if (data === 'community') {
            const communityMessage = `
üë• **–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏!**

üì¢ **–ö–∞–Ω–∞–ª "–î–æ–∫—Ç–æ—Ä –¢–∏—Ö–æ–Ω—Å—å–∫–∞"**

üî• **–©–æ –≤–∞—Å —á–µ–∫–∞—î:**
‚Ä¢ –ö–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏ –∑ –¥–æ–≥–ª—è–¥—É –∑–∞ —à–∫—ñ—Ä–æ—é
‚Ä¢ –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è
‚Ä¢ –ù–æ–≤–∏–Ω–∏ –∑—ñ —Å–≤—ñ—Ç—É –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥—ñ—ó
‚Ä¢ –ê–∫—Ü—ñ—ó —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä –Ω–∞—à–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤

üì± –ë—ñ–ª—å—à–µ 1000+ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ –≤–∂–µ –∑ –Ω–∞–º–∏!
            `;
            
            const communityKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{text: 'üì¢ –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', url: PUBLIC_CHANNEL}],
                        [{text: 'üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é', callback_data: 'back_to_main'}]
                    ]
                }
            };
            
            await bot.editMessageText(communityMessage, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                ...communityKeyboard
            });
            
        } else if (data === 'back_to_main') {
            const mainMessage = `
üå∏ **–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é**

–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª:
            `;
            
            await bot.editMessageText(mainMessage, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                ...generateMainMenu()
            });
        }
        
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ callback:', error);
        await bot.sendMessage(chatId, '‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.');
    }
});

// –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–∞–ø–∏—Å–∏
cron.schedule('0 9 * * *', async () => {
    console.log('üîî –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è...');
    // –¢—É—Ç –ª–æ–≥—ñ–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
});

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–æ–∫
cron.schedule('0 10 * * *', async () => {
    console.log('üìÖ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–ø–∏—Å–∫–∏...');
    // –¢—É—Ç –ª–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–æ–∫
});

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
initDatabase();

console.log('ü§ñ –ë–æ—Ç –¥–æ–∫—Ç–æ—Ä–∞ –¢–∏—Ö–æ–Ω—Å—å–∫–æ—ó –∑–∞–ø—É—â–µ–Ω–æ!');
console.log(`üåê –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –ø–æ—Ä—Ç—É ${ADMIN_PORT}`);
'''

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª
with open('bot.js', 'w', encoding='utf-8') as f:
    f.write(bot_js_content)

print("‚úÖ bot.js —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ –ø–æ–≤–Ω–∏–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º")