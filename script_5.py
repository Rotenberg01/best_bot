# –°—Ç–≤–æ—Ä—é—é —Å–∫—Ä–∏–ø—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î

database_init_js = '''
const sqlite3 = require('sqlite3').verbose();
const fs = require('fs-extra');
const path = require('path');

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ –¥–ª—è –ë–î
const dbPath = './database';
if (!fs.existsSync(dbPath)) {
    fs.mkdirSync(dbPath, { recursive: true });
    console.log('‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–∞–ø–∫—É database/');
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î
const db = new sqlite3.Database('./database/cosmetology.db');

console.log('üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...');

// SQL –∑–∞–ø–∏—Ç–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
const createTables = [
    // –¢–∞–±–ª–∏—Ü—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    `CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        telegram_id INTEGER UNIQUE NOT NULL,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        phone TEXT,
        email TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        active INTEGER DEFAULT 1,
        last_activity DATETIME DEFAULT CURRENT_TIMESTAMP
    )`,
    
    // –¢–∞–±–ª–∏—Ü—è –∑–∞–ø–∏—Å—ñ–≤
    `CREATE TABLE IF NOT EXISTS appointments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        type TEXT NOT NULL, -- 'consultation', 'repeat_consultation', 'procedure'
        city TEXT NOT NULL,
        date TEXT NOT NULL,
        time TEXT NOT NULL,
        procedure_name TEXT,
        price INTEGER DEFAULT 0,
        payment_method TEXT, -- 'card', 'cash'
        payment_status TEXT DEFAULT 'pending', -- 'pending', 'paid', 'cancelled'
        notes TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (id)
    )`,
    
    // –¢–∞–±–ª–∏—Ü—è –ø—ñ–¥–ø–∏—Å–æ–∫
    `CREATE TABLE IF NOT EXISTS subscriptions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        subscription_type TEXT DEFAULT 'beauty_insider', -- 'beauty_insider'
        start_date DATE NOT NULL,
        end_date DATE NOT NULL,
        price INTEGER DEFAULT 300,
        payment_status TEXT DEFAULT 'pending',
        active INTEGER DEFAULT 1,
        reminder_sent INTEGER DEFAULT 0,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (id)
    )`,
    
    // –¢–∞–±–ª–∏—Ü—è —Ä–æ–±–æ—á–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫—É
    `CREATE TABLE IF NOT EXISTS working_schedule (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        date TEXT NOT NULL,
        city TEXT NOT NULL,
        time TEXT NOT NULL,
        available INTEGER DEFAULT 1, -- 1 - –¥–æ—Å—Ç—É–ø–Ω–æ, 0 - –∑–∞–π–Ω—è—Ç–æ
        appointment_id INTEGER,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (appointment_id) REFERENCES appointments (id)
    )`,
    
    // –¢–∞–±–ª–∏—Ü—è –ø—Ä–æ—Ü–µ–¥—É—Ä
    `CREATE TABLE IF NOT EXISTS procedures (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        description TEXT,
        price INTEGER NOT NULL,
        duration INTEGER DEFAULT 60, -- —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö
        cities TEXT NOT NULL, -- JSON –º–∞—Å–∏–≤ –º—ñ—Å—Ç
        active INTEGER DEFAULT 1,
        category TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`,
    
    // –¢–∞–±–ª–∏—Ü—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
    `CREATE TABLE IF NOT EXISTS admin_messages (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        message TEXT NOT NULL,
        message_type TEXT DEFAULT 'broadcast', -- 'broadcast', 'reminder', 'notification'
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        sent_to_users INTEGER DEFAULT 0,
        delivery_status TEXT DEFAULT 'pending' -- 'pending', 'sent', 'failed'
    )`,
    
    // –¢–∞–±–ª–∏—Ü—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –±–æ—Ç–∞
    `CREATE TABLE IF NOT EXISTS bot_settings (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        setting_key TEXT UNIQUE NOT NULL,
        setting_value TEXT NOT NULL,
        description TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`,
    
    // –¢–∞–±–ª–∏—Ü—è –ø–ª–∞—Ç–µ–∂—ñ–≤
    `CREATE TABLE IF NOT EXISTS payments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        appointment_id INTEGER,
        subscription_id INTEGER,
        amount INTEGER NOT NULL,
        currency TEXT DEFAULT 'UAH',
        payment_method TEXT, -- 'portmone', 'cash', 'bank_transfer'
        payment_id TEXT, -- ID –ø–ª–∞—Ç–µ–∂—É –≤ –ø–ª–∞—Ç—ñ–∂–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ
        status TEXT DEFAULT 'pending', -- 'pending', 'success', 'failed', 'cancelled'
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (id),
        FOREIGN KEY (appointment_id) REFERENCES appointments (id),
        FOREIGN KEY (subscription_id) REFERENCES subscriptions (id)
    )`
];

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
const createTablesPromise = () => {
    return new Promise((resolve, reject) => {
        let completed = 0;
        createTables.forEach((query, index) => {
            db.run(query, (err) => {
                if (err) {
                    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ ${index + 1}:`, err.message);
                    reject(err);
                } else {
                    completed++;
                    if (completed === createTables.length) {
                        console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ ${createTables.length} —Ç–∞–±–ª–∏—Ü—å`);
                        resolve();
                    }
                }
            });
        });
    });
};

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
const insertInitialData = () => {
    console.log('üîÑ –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...');
    
    // –ü—Ä–æ—Ü–µ–¥—É—Ä–∏
    const procedures = [
        ['–ß–∏—â–µ–Ω–Ω—è –æ–±–ª–∏—á—á—è', '–ì–ª–∏–±–æ–∫–µ –æ—á–∏—â–µ–Ω–Ω—è –ø–æ—Ä, –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–º–µ–¥–æ–Ω—ñ–≤', 800, 90, '["–î–Ω—ñ–ø—Ä–æ", "–ó–∞–ø–æ—Ä—ñ–∂–∂—è"]', '–ß–∏—â–µ–Ω–Ω—è'],
        ['–ú–µ–∑–æ—Ç–µ—Ä–∞–ø—ñ—è –æ–±–ª–∏—á—á—è', '–Ü–Ω\'—î–∫—Ü—ñ—ó –≤—ñ—Ç–∞–º—ñ–Ω–Ω–∏—Ö –∫–æ–∫—Ç–µ–π–ª—ñ–≤ –¥–ª—è –æ–º–æ–ª–æ–¥–∂–µ–Ω–Ω—è', 1200, 60, '["–î–Ω—ñ–ø—Ä–æ", "–ó–∞–ø–æ—Ä—ñ–∂–∂—è"]', '–Ü–Ω\'—î–∫—Ü—ñ—ó'],
        ['–ë—ñ–æ—Ä–µ–≤—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è', '–ì–ª–∏–±–æ–∫–µ –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è —à–∫—ñ—Ä–∏ –≥—ñ–∞–ª—É—Ä–æ–Ω–æ–≤–æ—é –∫–∏—Å–ª–æ—Ç–æ—é', 1500, 45, '["–î–Ω—ñ–ø—Ä–æ", "–ó–∞–ø–æ—Ä—ñ–∂–∂—è"]', '–Ü–Ω\'—î–∫—Ü—ñ—ó'],
        ['–ü—ñ–ª—ñ–Ω–≥ —Ö—ñ–º—ñ—á–Ω–∏–π', '–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —à–∫—ñ—Ä–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–∏—Å–ª–æ—Ç', 900, 75, '["–î–Ω—ñ–ø—Ä–æ", "–ó–∞–ø–æ—Ä—ñ–∂–∂—è"]', '–ü—ñ–ª—ñ–Ω–≥–∏'],
        ['–ö–æ–Ω—Ç—É—Ä–Ω–∞ –ø–ª–∞—Å—Ç–∏–∫–∞', '–ö–æ—Ä–µ–∫—Ü—ñ—è –æ–±\'—î–º—É —Ç–∞ –∫–æ–Ω—Ç—É—Ä—ñ–≤ —Ñ—ñ–ª–µ—Ä–∞–º–∏', 2000, 60, '["–î–Ω—ñ–ø—Ä–æ", "–ó–∞–ø–æ—Ä—ñ–∂–∂—è"]', '–Ü–Ω\'—î–∫—Ü—ñ—ó'],
        ['–ë–æ—Ç—É–ª—ñ–Ω–æ—Ç–µ—Ä–∞–ø—ñ—è', '–†–æ–∑–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è –∑–º–æ—Ä—à–æ–∫ –±–æ—Ç—É–ª–æ—Ç–æ–∫—Å–∏–Ω–æ–º', 1800, 30, '["–î–Ω—ñ–ø—Ä–æ", "–ó–∞–ø–æ—Ä—ñ–∂–∂—è"]', '–Ü–Ω\'—î–∫—Ü—ñ—ó'],
        ['RF-–ª—ñ—Ñ—Ç–∏–Ω–≥', '–ë–µ–∑–æ–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞ –ø—ñ–¥—Ç—è–∂–∫–∞ —Ä–∞–¥—ñ–æ—á–∞—Å—Ç–æ—Ç–∞–º–∏', 1000, 90, '["–î–Ω—ñ–ø—Ä–æ", "–ó–∞–ø–æ—Ä—ñ–∂–∂—è"]', '–ê–ø–∞—Ä–∞—Ç–Ω–∞ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥—ñ—è'],
        ['–§–æ—Ç–æ–æ–º–æ–ª–æ–¥–∂–µ–Ω–Ω—è', '–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —à–∫—ñ—Ä–∏ —Å–≤—ñ—Ç–ª–æ–º IPL', 1100, 60, '["–î–Ω—ñ–ø—Ä–æ", "–ó–∞–ø–æ—Ä—ñ–∂–∂—è"]', '–ê–ø–∞—Ä–∞—Ç–Ω–∞ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥—ñ—è'],
        ['–ú–∞—Å–∞–∂ –æ–±–ª–∏—á—á—è', '–†–æ–∑—Å–ª–∞–±–ª—é—é—á–∏–π —Ç–∞ –æ–º–æ–ª–æ–¥–∂—É—é—á–∏–π –º–∞—Å–∞–∂', 600, 60, '["–î–Ω—ñ–ø—Ä–æ", "–ó–∞–ø–æ—Ä—ñ–∂–∂—è"]', '–ú–∞—Å–∞–∂'],
        ['–ö–∞—Ä–±–æ–∫—Å–∏—Ç–µ—Ä–∞–ø—ñ—è', '–¢–µ—Ä–∞–ø—ñ—è –≤—É–≥–ª–µ–∫–∏—Å–ª–∏–º –≥–∞–∑–æ–º', 1300, 45, '["–î–Ω—ñ–ø—Ä–æ", "–ó–∞–ø–æ—Ä—ñ–∂–∂—è"]', '–Ü–Ω\'—î–∫—Ü—ñ—ó'],
        ['SMAS-–ª—ñ—Ñ—Ç–∏–Ω–≥', '–£–ª—å—Ç—Ä–∞–∑–≤—É–∫–æ–≤–∞ –ø—ñ–¥—Ç—è–∂–∫–∞ HIFU', 2500, 120, '["–î–Ω—ñ–ø—Ä–æ", "–ó–∞–ø–æ—Ä—ñ–∂–∂—è"]', '–ê–ø–∞—Ä–∞—Ç–Ω–∞ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥—ñ—è'],
        ['–ü–ª–∞–∑–º–æ—Ç–µ—Ä–∞–ø—ñ—è', '–û–º–æ–ª–æ–¥–∂–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–æ—é –ø–ª–∞–∑–º–æ—é –∫—Ä–æ–≤—ñ', 1400, 90, '["–î–Ω—ñ–ø—Ä–æ", "–ó–∞–ø–æ—Ä—ñ–∂–∂—è"]', '–Ü–Ω\'—î–∫—Ü—ñ—ó'],
        ['–ú—ñ–∫—Ä–æ–Ω—ñ–¥–ª—ñ–Ω–≥', '–°—Ç–∏–º—É–ª—è—Ü—ñ—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –º—ñ–∫—Ä–æ–≥–æ–ª–∫–∞–º–∏', 1100, 75, '["–î–Ω—ñ–ø—Ä–æ", "–ó–∞–ø–æ—Ä—ñ–∂–∂—è"]', '–ê–ø–∞—Ä–∞—Ç–Ω–∞ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥—ñ—è'],
        ['–õ—ñ–ø–æ–ª—ñ—Ç–∏–∫–∏', '–†–æ–∑—â–µ–ø–ª–µ–Ω–Ω—è –∂–∏—Ä–æ–≤–∏—Ö –≤—ñ–¥–∫–ª–∞–¥–µ–Ω—å', 1600, 45, '["–î–Ω—ñ–ø—Ä–æ", "–ó–∞–ø–æ—Ä—ñ–∂–∂—è"]', '–Ü–Ω\'—î–∫—Ü—ñ—ó'],
        ['–ù–∏—Ç—å–æ–≤–∏–π –ª—ñ—Ñ—Ç–∏–Ω–≥', '–ü—ñ–¥—Ç—è–∂–∫–∞ –º–µ–∑–æ–Ω–∏—Ç—è–º–∏', 3000, 90, '["–î–Ω—ñ–ø—Ä–æ", "–ó–∞–ø–æ—Ä—ñ–∂–∂—è"]', '–Ü–Ω\'—î–∫—Ü—ñ—ó'],
        ['–õ–∞–∑–µ—Ä–Ω–∞ —à–ª—ñ—Ñ–æ–≤–∫–∞', '–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —à–∫—ñ—Ä–∏ –ª–∞–∑–µ—Ä–æ–º', 2200, 60, '["–î–Ω—ñ–ø—Ä–æ", "–ó–∞–ø–æ—Ä—ñ–∂–∂—è"]', '–õ–∞–∑–µ—Ä–Ω–∞ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥—ñ—è'],
        ['–ö—Ä—ñ–æ–ª—ñ–ø–æ–ª—ñ–∑', '–ó–∞–º–æ—Ä–æ–∂—É–≤–∞–Ω–Ω—è –∂–∏—Ä–æ–≤–∏—Ö –∫–ª—ñ—Ç–∏–Ω', 1800, 120, '["–î–Ω—ñ–ø—Ä–æ", "–ó–∞–ø–æ—Ä—ñ–∂–∂—è"]', '–ê–ø–∞—Ä–∞—Ç–Ω–∞ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥—ñ—è'],
        ['–£–ª—å—Ç—Ä–∞–∑–≤—É–∫–æ–≤–∞ —á–∏—Å—Ç–∫–∞', '–ú\'—è–∫–µ –æ—á–∏—â–µ–Ω–Ω—è —É–ª—å—Ç—Ä–∞–∑–≤—É–∫–æ–º', 700, 60, '["–î–Ω—ñ–ø—Ä–æ", "–ó–∞–ø–æ—Ä—ñ–∂–∂—è"]', '–ß–∏—â–µ–Ω–Ω—è'],
        ['–í–∞–∫—É—É–º–Ω–∞ —á–∏—Å—Ç–∫–∞', '–ì–ª–∏–±–æ–∫–µ –æ—á–∏—â–µ–Ω–Ω—è –ø–æ—Ä –≤–∞–∫—É—É–º–æ–º', 650, 45, '["–î–Ω—ñ–ø—Ä–æ", "–ó–∞–ø–æ—Ä—ñ–∂–∂—è"]', '–ß–∏—â–µ–Ω–Ω—è'],
        ['–ê–ª—å–≥—ñ–Ω–∞—Ç–Ω—ñ –º–∞—Å–∫–∏', '–ó–≤–æ–ª–æ–∂—É—é—á—ñ —Ç–∞ –∑–∞—Å–ø–æ–∫—ñ–π–ª–∏–≤—ñ –º–∞—Å–∫–∏', 400, 30, '["–î–Ω—ñ–ø—Ä–æ", "–ó–∞–ø–æ—Ä—ñ–∂–∂—è"]', '–î–æ–≥–ª—è–¥']
    ];
    
    const procedureQuery = `INSERT OR IGNORE INTO procedures 
                           (name, description, price, duration, cities, category) 
                           VALUES (?, ?, ?, ?, ?, ?)`;
    
    procedures.forEach(procedure => {
        db.run(procedureQuery, procedure, (err) => {
            if (err) console.error('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∏:', err.message);
        });
    });
    
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞
    const settings = [
        ['consultation_price', '500', '–¶—ñ–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –≤ –≥—Ä–Ω'],
        ['repeat_consultation_price', '300', '–¶—ñ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –≤ –≥—Ä–Ω'],
        ['subscription_price', '300', '–¶—ñ–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ Beauty Insider –≤ –≥—Ä–Ω'],
        ['subscription_duration', '30', '–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–∫–∏ –≤ –¥–Ω—è—Ö'],
        ['working_hours_start', '08:00', '–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è'],
        ['working_hours_end', '20:00', '–ö—ñ–Ω–µ—Ü—å —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è'],
        ['appointment_duration', '30', '–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Å–ª–æ—Ç—É –∑–∞–ø–∏—Å—É –≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö'],
        ['reminder_days', '1', '–ó–∞ —Å–∫—ñ–ª—å–∫–∏ –¥–Ω—ñ–≤ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è'],
        ['portmone_payee_id', 'YOUR_PAYEE_ID', 'ID –≤ —Å–∏—Å—Ç–µ–º—ñ Portmone'],
        ['private_channel_url', 'https://t.me/+EYuNQljQHaNjYmI6', '–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–∞–Ω–∞–ª'],
        ['public_channel_url', 'https://t.me/dr_tykhonska', '–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—É–±–ª—ñ—á–Ω–∏–π –∫–∞–Ω–∞–ª'],
        ['doctor_telegram', '@tykhonskaa', 'Telegram –¥–æ–∫—Ç–æ—Ä–∞'],
        ['doctor_instagram', 'dr.tykhonskaa', 'Instagram –¥–æ–∫—Ç–æ—Ä–∞'],
        ['doctor_tiktok', '@dr.tykhonska', 'TikTok –¥–æ–∫—Ç–æ—Ä–∞']
    ];
    
    const settingQuery = `INSERT OR IGNORE INTO bot_settings 
                         (setting_key, setting_value, description) 
                         VALUES (?, ?, ?)`;
    
    settings.forEach(setting => {
        db.run(settingQuery, setting, (err) => {
            if (err) console.error('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:', err.message);
        });
    });
    
    console.log(`‚úÖ –î–æ–¥–∞–Ω–æ ${procedures.length} –ø—Ä–æ—Ü–µ–¥—É—Ä —Ç–∞ ${settings.length} –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å`);
};

// –í–∏–∫–æ–Ω–∞–Ω–Ω—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
createTablesPromise()
    .then(() => {
        insertInitialData();
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞!');
        console.log('üìÅ –§–∞–π–ª –ë–î: ./database/cosmetology.db');
        db.close();
    })
    .catch((error) => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î:', error);
        db.close();
        process.exit(1);
    });
'''

# –°—Ç–≤–æ—Ä—é—é .env —Ñ–∞–π–ª
env_content = '''# Telegram Bot Configuration
BOT_TOKEN=8464053440:AAGsYPF-TyVENUHBloOfVuHvq2ehuSpn-VY

# Server Configuration  
PORT=3000
ADMIN_PORT=3001
NODE_ENV=production

# Admin Panel
ADMIN_PASSWORD=admin2024

# Database
DATABASE_PATH=./database/cosmetology.db

# VPS Configuration
VPS_IP=31.131.25.109
DOMAIN=dr-tykhonska.com.ua

# Payment System (Portmone)
PORTMONE_PAYEE_ID=YOUR_PAYEE_ID
PORTMONE_LOGIN=YOUR_LOGIN
PORTMONE_PASSWORD=YOUR_PASSWORD

# Channels and Social Media
PRIVATE_CHANNEL_URL=https://t.me/+EYuNQljQHaNjYmI6
PUBLIC_CHANNEL_URL=https://t.me/dr_tykhonska
DOCTOR_TELEGRAM=@tykhonskaa
DOCTOR_INSTAGRAM=dr.tykhonskaa
DOCTOR_TIKTOK=@dr.tykhonska

# Business Settings
CONSULTATION_PRICE=500
SUBSCRIPTION_PRICE=300
WORKING_HOURS_START=08:00
WORKING_HOURS_END=20:00

# Locations
DNIPRO_ADDRESS=–ü—Ä–æ—Å–ø–µ–∫—Ç –û–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ü–æ–ª—è 22
ZAPORIZHZHIA_ADDRESS=–ü–µ—Ä—à–∞ –ª–∏–≤–∞—Ä–Ω–∞ 27–∞
DNIPRO_MAPS=https://maps.app.goo.gl/vauDWtxgUE4J4b8M6?g_st=ic
ZAPORIZHZHIA_MAPS=https://maps.app.goo.gl/nyoi4rQC54FQCP7F9?g_st=ic

# SSL Certificate (for production)
SSL_CERT_PATH=/etc/ssl/certs/dr-tykhonska.crt
SSL_KEY_PATH=/etc/ssl/private/dr-tykhonska.key
'''

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª–∏
with open('database_init.js', 'w', encoding='utf-8') as f:
    f.write(database_init_js)

with open('.env.example', 'w', encoding='utf-8') as f:
    f.write(env_content)

print("‚úÖ database/init.js —Å—Ç–≤–æ—Ä–µ–Ω–æ")
print("‚úÖ .env.example —Å—Ç–≤–æ—Ä–µ–Ω–æ")